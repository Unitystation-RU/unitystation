name: Test UnityStation Build

on:
  push:
    branches:
      - develop
      - prod
    paths:
      - "Tools/UnityLicense.ulf"
      - "UnityProject/**"
      - ".github/workflows/**"
      - "Docker/**"

  pull_request:
    branches:
      - develop
      - prod
    paths:
      - "Tools/UnityLicense.ulf"
      - "UnityProject/**"
      - ".github/workflows/**"

#setup unity-license file for unity tester
env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

jobs:
  performTest:
    name: Test in ${{ matrix.testMode }} on Unity version ${{ matrix.unityVersion }} for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        projectPath:
          - UnityProject
        unityVersion:
          - 2020.1.6f1
        targetPlatform:
        #LIST of available buildtargets is here https://docs.unity3d.com/2019.1/Documentation/ScriptReference/BuildTarget.html
          - StandaloneWindows64
          - StandaloneLinux64
        testMode:
          - playmode
          - editmode
    steps:

        #repo checkout
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          lfs: true

        #use chache to speed up things 
      - name: Use cache libraries
        uses: actions/cache@v1.1.0
        with:
          path: ${{ matrix.projectPath }}/Library
          key: Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-${{ matrix.projectPath }}-
            Library-
            
      # Install dotnet
      - name: Installing dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "2.1.202"

      - name: Test ${{ matrix.testMode }} for ${{ matrix.targetPlatform }} 
        uses: webbertakken/unity-test-runner@v1.4
        id: tests
        with:
          projectPath: ${{ matrix.projectPath }}
          unityVersion: ${{ matrix.unityVersion }}
          testMode: ${{ matrix.testMode }}
          artifactsPath: ${{ matrix.testMode }}-artifacts

      # Do the report magic
 #     - name: Generate .html report
 #       if: always()
#        run: sudo dotnet ./Tools/ExtentReports/ExtentReportsDotNetCLI.dll -i=testReports/${{ matrix.targetPlatform }}/editmode-results.xml -o testReports/${{ matrix.targetPlatform }}/

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: Test results for ${{ matrix.testMode }}
          path: ${{ steps.tests.outputs.artifactsPath }}
